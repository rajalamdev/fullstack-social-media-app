import Head from "next/head";
import  Router from "next/router";
import { useState } from "react";
import { verifyToken } from "../api/auth/authToken"

export async function getServerSideProps(ctx){  
  const verify = await verifyToken(ctx)

  const reqMe = await fetch(`${process.env.PUBLIC_API_URL}/api/users/me`, {
    headers: {
      "Authorization": "Bearer " + verify
    }
  })

  const resMe = await reqMe.json();

  return {
      props: {
          token: verify,
          me: resMe
      }
  }
}

export default function Account({token, me}) {
  const [username, setUsername] = useState(me.username);
  const [email, setEmail] = useState(me.email);
  const [usernameForm, setUsernameForm] = useState(false)
  const [emailForm, setEmailForm] = useState(false)

  async function editAccountInformation(e){
    e.preventDefault();
    await fetch(`${process.env.PUBLIC_API_URL}/api/users/${me.id}`, {
      method: "PUT",
      headers: {
        "Authorization": "Bearer " + token,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        "username": username,
        "email": email
      })
    })

    Router.replace("/")
  }

  return (
    <>
    <Head>
        <title>Settings | Account</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
    </Head>
    <div className="bg-bg-primary z-30 transition-all duration-300 fixed left-0 right-0 bottom-0 top-0 h-full">
      <form onSubmit={editAccountInformation} className="relative h-full max-w-[390px] sm:max-w-[500px] mx-auto pt-20">
        <div className="py-4 px-4">
          <h2>Username</h2>
          <p className="text-text-third">@{me.username}</p>
          <div onClick={() => setUsernameForm(!usernameForm)} className="text-sm cursor-pointer text-header-primary">change</div>
          {usernameForm && (
            <input  autoComplete="off" type="text" className="w-[100%] block h-8 rounded mt-1 outline-none self-center bg-bg-primary ring-1 ring-border-secondary px-4 focus:w-full transition-all duration-300 focus:ring-2 focus:ring-header-primary" name="name" onChange={(e) => setUsername(e.target.value)} value={username} />
          )}
        </div>
        <div className="py-4 px-4">
          <h2>Email</h2>
          <p className="text-text-third">{me.email}</p>
          <div onClick={() => setEmailForm(!emailForm)} className="text-sm cursor-pointer text-header-primary">change</div>
          {emailForm && (
            <input  autoComplete="off" type="text" className="w-[100%] block h-8 rounded mt-1 outline-none self-center bg-bg-primary ring-1 ring-border-secondary px-4 focus:w-full transition-all duration-300 focus:ring-2 focus:ring-header-primary" name="name" onChange={(e) => setEmail(e.target.value)} value={email} />
          )}
        </div>
        <button className="mt-3 px-4 ml-4 py-1 bg-header-primary rounded text-sm">Save</button>
      </form>
    </div>
    </>
  )
}
